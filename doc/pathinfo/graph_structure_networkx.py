import matplotlib.pyplot as plt
import networkx as nx
G=nx.DiGraph()
G.add_node("a")
G.add_node("b")
G.add_node("c")
G.add_node("d")
G.add_node("e")
G.add_node("f")
G.add_node("g")
G.add_node("h")
G.add_node("i")
G.add_node("j")
G.add_node("k")
G.add_node("l")
G.add_node("m")
G.add_node("n")
G.add_node("o")
G.add_node("p")
G.add_node("q")
G.add_node("r")
G.add_node("s")
G.add_node("t")
G.add_node("u")
G.add_node("v")
G.add_node("w")
G.add_node("x")
G.add_node("y")
G.add_node("z")
G.add_edge("a", "x")
G.add_edge("a", "w")
G.add_edge("a", "u")
G.add_edge("a", "t")
G.add_edge("a", "s")
G.add_edge("a", "j")
G.add_edge("a", "i")
G.add_edge("a", "h")
G.add_edge("a", "g")
G.add_edge("a", "f")
G.add_edge("b", "y")
G.add_edge("b", "w")
G.add_edge("b", "v")
G.add_edge("b", "u")
G.add_edge("b", "p")
G.add_edge("b", "o")
G.add_edge("b", "l")
G.add_edge("b", "i")
G.add_edge("b", "f")
G.add_edge("b", "c")
G.add_edge("c", "x")
G.add_edge("c", "s")
G.add_edge("c", "p")
G.add_edge("c", "m")
G.add_edge("c", "l")
G.add_edge("c", "k")
G.add_edge("c", "i")
G.add_edge("c", "h")
G.add_edge("c", "g")
G.add_edge("c", "b")
G.add_edge("d", "w")
G.add_edge("d", "v")
G.add_edge("d", "u")
G.add_edge("d", "o")
G.add_edge("d", "n")
G.add_edge("d", "m")
G.add_edge("d", "k")
G.add_edge("d", "j")
G.add_edge("d", "h")
G.add_edge("d", "f")
G.add_edge("e", "z")
G.add_edge("e", "v")
G.add_edge("e", "u")
G.add_edge("e", "t")
G.add_edge("e", "s")
G.add_edge("e", "r")
G.add_edge("e", "q")
G.add_edge("e", "p")
G.add_edge("e", "n")
G.add_edge("e", "g")
G.add_edge("f", "z")
G.add_edge("f", "y")
G.add_edge("f", "x")
G.add_edge("f", "s")
G.add_edge("f", "p")
G.add_edge("f", "k")
G.add_edge("f", "i")
G.add_edge("f", "d")
G.add_edge("f", "b")
G.add_edge("f", "a")
G.add_edge("g", "x")
G.add_edge("g", "w")
G.add_edge("g", "t")
G.add_edge("g", "p")
G.add_edge("g", "l")
G.add_edge("g", "j")
G.add_edge("g", "h")
G.add_edge("g", "e")
G.add_edge("g", "c")
G.add_edge("g", "a")
G.add_edge("h", "y")
G.add_edge("h", "u")
G.add_edge("h", "q")
G.add_edge("h", "n")
G.add_edge("h", "l")
G.add_edge("h", "i")
G.add_edge("h", "g")
G.add_edge("h", "d")
G.add_edge("h", "c")
G.add_edge("h", "a")
G.add_edge("i", "w")
G.add_edge("i", "t")
G.add_edge("i", "s")
G.add_edge("i", "o")
G.add_edge("i", "k")
G.add_edge("i", "h")
G.add_edge("i", "f")
G.add_edge("i", "c")
G.add_edge("i", "b")
G.add_edge("i", "a")
G.add_edge("j", "y")
G.add_edge("j", "x")
G.add_edge("j", "p")
G.add_edge("j", "n")
G.add_edge("j", "m")
G.add_edge("j", "l")
G.add_edge("j", "k")
G.add_edge("j", "g")
G.add_edge("j", "d")
G.add_edge("j", "a")
G.add_edge("k", "z")
G.add_edge("k", "w")
G.add_edge("k", "t")
G.add_edge("k", "n")
G.add_edge("k", "l")
G.add_edge("k", "j")
G.add_edge("k", "i")
G.add_edge("k", "f")
G.add_edge("k", "d")
G.add_edge("k", "c")
G.add_edge("l", "u")
G.add_edge("l", "r")
G.add_edge("l", "p")
G.add_edge("l", "m")
G.add_edge("l", "k")
G.add_edge("l", "j")
G.add_edge("l", "h")
G.add_edge("l", "g")
G.add_edge("l", "c")
G.add_edge("l", "b")
G.add_edge("m", "z")
G.add_edge("m", "x")
G.add_edge("m", "w")
G.add_edge("m", "u")
G.add_edge("m", "r")
G.add_edge("m", "o")
G.add_edge("m", "l")
G.add_edge("m", "j")
G.add_edge("m", "d")
G.add_edge("m", "c")
G.add_edge("n", "y")
G.add_edge("n", "u")
G.add_edge("n", "s")
G.add_edge("n", "r")
G.add_edge("n", "p")
G.add_edge("n", "k")
G.add_edge("n", "j")
G.add_edge("n", "h")
G.add_edge("n", "e")
G.add_edge("n", "d")
G.add_edge("o", "x")
G.add_edge("o", "v")
G.add_edge("o", "t")
G.add_edge("o", "s")
G.add_edge("o", "r")
G.add_edge("o", "q")
G.add_edge("o", "m")
G.add_edge("o", "i")
G.add_edge("o", "d")
G.add_edge("o", "b")
G.add_edge("p", "z")
G.add_edge("p", "y")
G.add_edge("p", "n")
G.add_edge("p", "l")
G.add_edge("p", "j")
G.add_edge("p", "g")
G.add_edge("p", "f")
G.add_edge("p", "e")
G.add_edge("p", "c")
G.add_edge("p", "b")
G.add_edge("q", "z")
G.add_edge("q", "y")
G.add_edge("q", "w")
G.add_edge("q", "v")
G.add_edge("q", "u")
G.add_edge("q", "t")
G.add_edge("q", "r")
G.add_edge("q", "o")
G.add_edge("q", "h")
G.add_edge("q", "e")
G.add_edge("r", "z")
G.add_edge("r", "w")
G.add_edge("r", "v")
G.add_edge("r", "u")
G.add_edge("r", "q")
G.add_edge("r", "o")
G.add_edge("r", "n")
G.add_edge("r", "m")
G.add_edge("r", "l")
G.add_edge("r", "e")
G.add_edge("s", "y")
G.add_edge("s", "w")
G.add_edge("s", "v")
G.add_edge("s", "o")
G.add_edge("s", "n")
G.add_edge("s", "i")
G.add_edge("s", "f")
G.add_edge("s", "e")
G.add_edge("s", "c")
G.add_edge("s", "a")
G.add_edge("t", "z")
G.add_edge("t", "x")
G.add_edge("t", "v")
G.add_edge("t", "q")
G.add_edge("t", "o")
G.add_edge("t", "k")
G.add_edge("t", "i")
G.add_edge("t", "g")
G.add_edge("t", "e")
G.add_edge("t", "a")
G.add_edge("u", "r")
G.add_edge("u", "q")
G.add_edge("u", "n")
G.add_edge("u", "m")
G.add_edge("u", "l")
G.add_edge("u", "h")
G.add_edge("u", "e")
G.add_edge("u", "d")
G.add_edge("u", "b")
G.add_edge("u", "a")
G.add_edge("v", "z")
G.add_edge("v", "x")
G.add_edge("v", "t")
G.add_edge("v", "s")
G.add_edge("v", "r")
G.add_edge("v", "q")
G.add_edge("v", "o")
G.add_edge("v", "e")
G.add_edge("v", "d")
G.add_edge("v", "b")
G.add_edge("w", "s")
G.add_edge("w", "r")
G.add_edge("w", "q")
G.add_edge("w", "m")
G.add_edge("w", "k")
G.add_edge("w", "i")
G.add_edge("w", "g")
G.add_edge("w", "d")
G.add_edge("w", "b")
G.add_edge("w", "a")
G.add_edge("x", "y")
G.add_edge("x", "v")
G.add_edge("x", "t")
G.add_edge("x", "o")
G.add_edge("x", "m")
G.add_edge("x", "j")
G.add_edge("x", "g")
G.add_edge("x", "f")
G.add_edge("x", "c")
G.add_edge("x", "a")
G.add_edge("y", "z")
G.add_edge("y", "x")
G.add_edge("y", "s")
G.add_edge("y", "q")
G.add_edge("y", "p")
G.add_edge("y", "n")
G.add_edge("y", "j")
G.add_edge("y", "h")
G.add_edge("y", "f")
G.add_edge("y", "b")
G.add_edge("z", "y")
G.add_edge("z", "v")
G.add_edge("z", "t")
G.add_edge("z", "r")
G.add_edge("z", "q")
G.add_edge("z", "p")
G.add_edge("z", "m")
G.add_edge("z", "k")
G.add_edge("z", "f")
G.add_edge("z", "e")
layout = nx.circular_layout(G)
nx.draw_networkx(G, pos=layout, with_labels=True)
plt.show()
