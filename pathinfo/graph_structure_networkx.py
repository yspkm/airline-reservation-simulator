import matplotlib.pyplot as plt
import networkx as nx
G=nx.DiGraph()
G.add_node("a")
G.add_node("b")
G.add_node("c")
G.add_node("d")
G.add_node("e")
G.add_node("f")
G.add_node("g")
G.add_node("h")
G.add_node("i")
G.add_node("j")
G.add_node("k")
G.add_node("l")
G.add_node("m")
G.add_node("n")
G.add_node("o")
G.add_node("p")
G.add_node("q")
G.add_node("r")
G.add_node("s")
G.add_node("t")
G.add_node("u")
G.add_node("v")
G.add_node("w")
G.add_node("x")
G.add_node("y")
G.add_node("z")
G.add_edge("a", "z")
G.add_edge("a", "y")
G.add_edge("a", "x")
G.add_edge("a", "w")
G.add_edge("a", "r")
G.add_edge("a", "p")
G.add_edge("a", "o")
G.add_edge("a", "g")
G.add_edge("a", "e")
G.add_edge("a", "d")
G.add_edge("b", "w")
G.add_edge("b", "u")
G.add_edge("b", "n")
G.add_edge("b", "l")
G.add_edge("b", "k")
G.add_edge("b", "i")
G.add_edge("b", "g")
G.add_edge("b", "e")
G.add_edge("b", "d")
G.add_edge("b", "c")
G.add_edge("c", "z")
G.add_edge("c", "v")
G.add_edge("c", "s")
G.add_edge("c", "r")
G.add_edge("c", "o")
G.add_edge("c", "l")
G.add_edge("c", "h")
G.add_edge("c", "e")
G.add_edge("c", "d")
G.add_edge("c", "b")
G.add_edge("d", "y")
G.add_edge("d", "x")
G.add_edge("d", "q")
G.add_edge("d", "l")
G.add_edge("d", "g")
G.add_edge("d", "f")
G.add_edge("d", "e")
G.add_edge("d", "c")
G.add_edge("d", "b")
G.add_edge("d", "a")
G.add_edge("e", "z")
G.add_edge("e", "w")
G.add_edge("e", "q")
G.add_edge("e", "n")
G.add_edge("e", "h")
G.add_edge("e", "f")
G.add_edge("e", "d")
G.add_edge("e", "c")
G.add_edge("e", "b")
G.add_edge("e", "a")
G.add_edge("f", "x")
G.add_edge("f", "v")
G.add_edge("f", "s")
G.add_edge("f", "q")
G.add_edge("f", "n")
G.add_edge("f", "m")
G.add_edge("f", "j")
G.add_edge("f", "g")
G.add_edge("f", "e")
G.add_edge("f", "d")
G.add_edge("g", "x")
G.add_edge("g", "v")
G.add_edge("g", "u")
G.add_edge("g", "r")
G.add_edge("g", "q")
G.add_edge("g", "h")
G.add_edge("g", "f")
G.add_edge("g", "d")
G.add_edge("g", "b")
G.add_edge("g", "a")
G.add_edge("h", "z")
G.add_edge("h", "y")
G.add_edge("h", "x")
G.add_edge("h", "s")
G.add_edge("h", "o")
G.add_edge("h", "m")
G.add_edge("h", "i")
G.add_edge("h", "g")
G.add_edge("h", "e")
G.add_edge("h", "c")
G.add_edge("i", "z")
G.add_edge("i", "y")
G.add_edge("i", "w")
G.add_edge("i", "u")
G.add_edge("i", "r")
G.add_edge("i", "o")
G.add_edge("i", "k")
G.add_edge("i", "j")
G.add_edge("i", "h")
G.add_edge("i", "b")
G.add_edge("j", "y")
G.add_edge("j", "w")
G.add_edge("j", "v")
G.add_edge("j", "t")
G.add_edge("j", "r")
G.add_edge("j", "p")
G.add_edge("j", "n")
G.add_edge("j", "k")
G.add_edge("j", "i")
G.add_edge("j", "f")
G.add_edge("k", "y")
G.add_edge("k", "x")
G.add_edge("k", "u")
G.add_edge("k", "s")
G.add_edge("k", "r")
G.add_edge("k", "p")
G.add_edge("k", "o")
G.add_edge("k", "j")
G.add_edge("k", "i")
G.add_edge("k", "b")
G.add_edge("l", "z")
G.add_edge("l", "x")
G.add_edge("l", "t")
G.add_edge("l", "q")
G.add_edge("l", "p")
G.add_edge("l", "o")
G.add_edge("l", "n")
G.add_edge("l", "d")
G.add_edge("l", "c")
G.add_edge("l", "b")
G.add_edge("m", "y")
G.add_edge("m", "v")
G.add_edge("m", "u")
G.add_edge("m", "t")
G.add_edge("m", "s")
G.add_edge("m", "r")
G.add_edge("m", "q")
G.add_edge("m", "o")
G.add_edge("m", "h")
G.add_edge("m", "f")
G.add_edge("n", "z")
G.add_edge("n", "w")
G.add_edge("n", "v")
G.add_edge("n", "u")
G.add_edge("n", "r")
G.add_edge("n", "l")
G.add_edge("n", "j")
G.add_edge("n", "f")
G.add_edge("n", "e")
G.add_edge("n", "b")
G.add_edge("o", "v")
G.add_edge("o", "u")
G.add_edge("o", "s")
G.add_edge("o", "m")
G.add_edge("o", "l")
G.add_edge("o", "k")
G.add_edge("o", "i")
G.add_edge("o", "h")
G.add_edge("o", "c")
G.add_edge("o", "a")
G.add_edge("p", "x")
G.add_edge("p", "w")
G.add_edge("p", "v")
G.add_edge("p", "u")
G.add_edge("p", "t")
G.add_edge("p", "s")
G.add_edge("p", "l")
G.add_edge("p", "k")
G.add_edge("p", "j")
G.add_edge("p", "a")
G.add_edge("q", "x")
G.add_edge("q", "w")
G.add_edge("q", "t")
G.add_edge("q", "r")
G.add_edge("q", "m")
G.add_edge("q", "l")
G.add_edge("q", "g")
G.add_edge("q", "f")
G.add_edge("q", "e")
G.add_edge("q", "d")
G.add_edge("r", "v")
G.add_edge("r", "q")
G.add_edge("r", "n")
G.add_edge("r", "m")
G.add_edge("r", "k")
G.add_edge("r", "j")
G.add_edge("r", "i")
G.add_edge("r", "g")
G.add_edge("r", "c")
G.add_edge("r", "a")
G.add_edge("s", "z")
G.add_edge("s", "v")
G.add_edge("s", "t")
G.add_edge("s", "p")
G.add_edge("s", "o")
G.add_edge("s", "m")
G.add_edge("s", "k")
G.add_edge("s", "h")
G.add_edge("s", "f")
G.add_edge("s", "c")
G.add_edge("t", "z")
G.add_edge("t", "y")
G.add_edge("t", "x")
G.add_edge("t", "u")
G.add_edge("t", "s")
G.add_edge("t", "q")
G.add_edge("t", "p")
G.add_edge("t", "m")
G.add_edge("t", "l")
G.add_edge("t", "j")
G.add_edge("u", "y")
G.add_edge("u", "t")
G.add_edge("u", "p")
G.add_edge("u", "o")
G.add_edge("u", "n")
G.add_edge("u", "m")
G.add_edge("u", "k")
G.add_edge("u", "i")
G.add_edge("u", "g")
G.add_edge("u", "b")
G.add_edge("v", "s")
G.add_edge("v", "r")
G.add_edge("v", "p")
G.add_edge("v", "o")
G.add_edge("v", "n")
G.add_edge("v", "m")
G.add_edge("v", "j")
G.add_edge("v", "g")
G.add_edge("v", "f")
G.add_edge("v", "c")
G.add_edge("w", "z")
G.add_edge("w", "y")
G.add_edge("w", "q")
G.add_edge("w", "p")
G.add_edge("w", "n")
G.add_edge("w", "j")
G.add_edge("w", "i")
G.add_edge("w", "e")
G.add_edge("w", "b")
G.add_edge("w", "a")
G.add_edge("x", "t")
G.add_edge("x", "q")
G.add_edge("x", "p")
G.add_edge("x", "l")
G.add_edge("x", "k")
G.add_edge("x", "h")
G.add_edge("x", "g")
G.add_edge("x", "f")
G.add_edge("x", "d")
G.add_edge("x", "a")
G.add_edge("y", "w")
G.add_edge("y", "u")
G.add_edge("y", "t")
G.add_edge("y", "m")
G.add_edge("y", "k")
G.add_edge("y", "j")
G.add_edge("y", "i")
G.add_edge("y", "h")
G.add_edge("y", "d")
G.add_edge("y", "a")
G.add_edge("z", "w")
G.add_edge("z", "t")
G.add_edge("z", "s")
G.add_edge("z", "n")
G.add_edge("z", "l")
G.add_edge("z", "i")
G.add_edge("z", "h")
G.add_edge("z", "e")
G.add_edge("z", "c")
G.add_edge("z", "a")
layout = nx.circular_layout(G)
nx.draw_networkx(G, pos=layout, with_labels=True)
plt.show()
